{"version":3,"sources":["../../../src/components/Main/Header.jsx"],"names":["elementStyles","isDark","HR_COLOR","firstTitle","border","padding","margin","h1","fontSize","lineHeight","fontWeight","h2","borderColor","borderBottomStyle","borderBottomWidth","paddingBottom","marginBottom","marginTop","h3","h4","textTransform","opacity","p","ul","hr","Marginal","base","paddingTop","paddingLeft","paddingRight","fontFamily","color","styles","markdown","props","removeHR","replace","trimmed","text","INDENT","repeat","indent","Component","propTypes","string","bool","edge","oneOf","defaultProps"],"mappings":"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","file":"Header.js","sourcesContent":["import React from 'react';\r\nimport Radium, { Style } from 'radium';\r\nimport { css, PropTypes } from '../util';\r\nimport { FONT_SANS } from '../GlobalStyles';\r\nimport { Markdown } from '../shared';\r\nimport { trimIndent } from 'react-atoms/components/Markdown';\r\n\r\n\r\nconst elementStyles = (isDark) => {\r\n  const HR_COLOR = isDark\r\n      ? 'rgba(255, 255, 255, 0.4)'\r\n      : 'rgba(0, 0, 0, 0.1)';\r\n\r\n  const firstTitle = {\r\n    border: 'none',\r\n    padding: 0,\r\n    margin: 0,\r\n  };\r\n  return css({\r\n    h1: {\r\n      fontSize: 32,\r\n      lineHeight: '40px',\r\n      padding: 0,\r\n      margin: 0,\r\n      fontWeight: 700,\r\n    },\r\n    h2: {\r\n      fontSize: 20,\r\n      lineHeight: '28px',\r\n      padding: 0,\r\n      margin: 0,\r\n      fontWeight: 200,\r\n      borderColor: HR_COLOR,\r\n      borderBottomStyle: 'solid',\r\n      borderBottomWidth: '1px',\r\n      paddingBottom: 8,\r\n      marginBottom: 10,\r\n      marginTop: 30,\r\n    },\r\n    'h2:first-of-type': firstTitle,\r\n    h3: {\r\n      fontSize: 18,\r\n      padding: 0,\r\n      margin: 0,\r\n      marginTop: 30,\r\n    },\r\n    'h3:first-of-type': firstTitle,\r\n    h4: {\r\n      fontSize: 14,\r\n      textTransform: 'uppercase',\r\n      padding: 0,\r\n      margin: 0,\r\n      marginTop: 30,\r\n      opacity: isDark ? 0.6 : 0.4,\r\n    },\r\n    'h5:first-of-type': firstTitle,\r\n    p: {\r\n      fontWeight: 400,\r\n      fontSize: 15,\r\n      lineHeight: '22px',\r\n      marginTop: 0,\r\n      marginBottom: 15,\r\n    },\r\n    ul: {\r\n      fontWeight: 200,\r\n      fontSize: 15,\r\n      lineHeight: '22px',\r\n    },\r\n    hr: {\r\n      borderColor: HR_COLOR,\r\n      marginTop: 20,\r\n      marginBottom: 20,\r\n    },\r\n    'hr:last-child': {\r\n      marginBottom: 0,\r\n    },\r\n    'hr:first-child': {\r\n      marginTop: 0,\r\n      marginBottom: 10,\r\n      borderBottomWidth: 10,\r\n    },\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * The Header/Footer bar of the [main] component host.\r\n */\r\nclass Marginal extends React.Component {\r\n  static propTypes = {\r\n    markdown: PropTypes.string,\r\n    hr: PropTypes.bool,\r\n    isDark: PropTypes.bool,\r\n    edge: PropTypes.oneOf(['top', 'bottom']),\r\n  };\r\n  static defaultProps = {\r\n    hr: false,\r\n    isDark: false,\r\n    edge: 'top',\r\n  };\r\n\r\n  styles() {\r\n    return css({\r\n      base: {\r\n        paddingTop: 15,\r\n        paddingBottom: 0,\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        fontFamily: FONT_SANS,\r\n        color: 'rgba(0, 0, 0, 0.5)',\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const styles = this.styles();\r\n    let { markdown } = this.props;\r\n    const { hr, isDark } = this.props;\r\n    const removeHR = () => { markdown = markdown.replace(/\\n\\s*-{3,}\\n*$/, ''); };\r\n\r\n    // Trim the indent\r\n    // (which may exist if from indented multi-line ES6 template strings).\r\n    const trimmed = trimIndent(markdown);\r\n    markdown = trimmed.text;\r\n\r\n    // Append or remove the <HR> at the end of the markdown\r\n    if (markdown) {\r\n      if (hr === true) {\r\n        removeHR(); // Ensure there is only one <HR>.\r\n        const INDENT = ' '.repeat(trimmed.indent);\r\n        markdown = `${ markdown }${ INDENT }\\n\\n---`;\r\n      }\r\n      if (hr === false) { removeHR(); }\r\n    }\r\n\r\n    return (\r\n      <div style={ styles.base } className=\"uih\">\r\n        <div className={ `uih-header uih-markdown ${ this.props.isDark && 'uih-dark' }` }>\r\n          <Style rules={ elementStyles(isDark) } scopeSelector=\".uih-header\" />\r\n          <Markdown\r\n            display=\"block\"\r\n            trimIndent={ false }\r\n            escapeHtml={ false }>\r\n            { markdown }\r\n          </Markdown>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Radium(Marginal);\r\n"]}