{"version":3,"sources":["../../src/shared/api-internal.js"],"names":["LOG_LIST","Symbol","COMPONENT","Api","current","Map","List","loadInvokeCount","resolve","register","global","UIHarness","uih","suite","lastSelectedSuite","loadSuite","storeAsLastSuite","Object","keys","suites","length","setCurrent","header","hr","scroll","width","loadComponent","hard","clearLocalStorage","component","startsWith","forEach","match","key","prop","value","undefined","componentType","componentProps","componentChildren","get","childSuites","meta","thisContext","toValues","indexMode","isBeforeInvoked","invokeBeforeHandlers","lastInvokedSpec","spec","isLoader","invokeSpec","updates","isValidElement","type","self","beforeHandlers","invoke","set","callback","parentSuite","loadInvokeCountBefore","specInvokeCount","total","id","result","localStorage","KEY","find","s","specs","mode","default","args","remove","clear","shell","setState","values","flatten","item","time","Date","push","log","showLog","options"],"mappings":"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","file":"api-internal.js","sourcesContent":["import invariant from 'invariant';\r\nimport localStorage from 'js-util/lib/local-storage';\r\nimport Immutable from 'immutable';\r\nimport Promise from 'bluebird';\r\nimport R from 'ramda';\r\nimport React from 'react';\r\n\r\nimport apiConsole from './api-console';\r\nimport bdd from './bdd';\r\nimport GettingStarted from '../components/docs/GettingStarted';\r\n\r\nconst LOG_LIST = Symbol('log-list');\r\nconst COMPONENT = Symbol('component');\r\n\r\n\r\n/**\r\n * The API used internally by the UIHarness components.\r\n */\r\nclass Api {\r\n  constructor() {\r\n    this.current = Immutable.Map();\r\n    this[LOG_LIST] = Immutable.List();\r\n    this.loadInvokeCount = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes the UIHarness environment.\r\n   * @return {Promise}.\r\n   */\r\n  init() {\r\n    return new Promise((resolve) => {\r\n      // Put state into global namespace.\r\n      bdd.register();\r\n      global.UIHarness = global.uih = apiConsole;\r\n\r\n      // Ensure the last loaded suite is set as the current state.\r\n      const suite = this.lastSelectedSuite();\r\n      if (suite) {\r\n        this.loadSuite(this.lastSelectedSuite(), { storeAsLastSuite: false });\r\n      }\r\n\r\n      // Show 'getting started' if empty.\r\n      if (Object.keys(bdd.suites).length === 0) {\r\n        this.setCurrent({\r\n          header: '## Getting Started',\r\n          hr: true,\r\n          scroll: 'y',\r\n          width: '100%',\r\n        });\r\n        this.loadComponent(GettingStarted);\r\n      }\r\n\r\n      // Done.\r\n      resolve({});\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Resets the internal API.\r\n   * @param {boolean} hard: Flag indicating if all state from local-storage\r\n   *                        should be cleared away, or just current selection state.\r\n   */\r\n  reset({ hard = true } = {}) {\r\n    if (hard) {\r\n      this.clearLocalStorage();\r\n    } else {\r\n      this.clearLocalStorage('lastInvokedSpec:');\r\n    }\r\n    this.lastSelectedSuite(null);\r\n    this.setCurrent(null);\r\n    this.component(null);\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes all ui-harness values stored in local-storage.\r\n   */\r\n  clearLocalStorage(startsWith = null) {\r\n    localStorage.keys().forEach(key => {\r\n      let match = 'ui-harness:';\r\n      if (startsWith) { match += startsWith; }\r\n      if (key.startsWith(match)) {\r\n        localStorage.prop(key, null); // Remove.\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets or sets the current component instance.\r\n   * Pass {null} to clear.\r\n   */\r\n  component(value) {\r\n    // WRITE.\r\n    if (value !== undefined) {\r\n      if (value === null) {\r\n        // Unload component.\r\n        delete this[COMPONENT];\r\n        delete apiConsole.component;\r\n        this.setCurrent({\r\n          componentType: undefined,\r\n          componentProps: undefined,\r\n          componentChildren: undefined,\r\n          component: undefined,\r\n        });\r\n      } else {\r\n        // Store component instance.\r\n        this[COMPONENT] = value;\r\n        apiConsole.component = value;\r\n        if (this.current.get('component') !== value) {\r\n          // NB: Perform instance comparison before updating the\r\n          //     current state to prevent render loop.\r\n          this.setCurrent({ component: value });\r\n        }\r\n      }\r\n    }\r\n\r\n    // READ.\r\n    return this[COMPONENT];\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads the current suite into the Harness.\r\n   *\r\n   * @param suite: The {Suite} to load.\r\n   * @param options\r\n   *          - storeAsLastSuite: Flag indicating if the suite should be stored\r\n   *                              as the last invoked suite in localStorage.\r\n   *                              Default: true.\r\n   */\r\n  loadSuite(suite, { storeAsLastSuite = true } = {}) {\r\n    // Setup initial conditions.\r\n    if (!suite) { return this; }\r\n    if (this.current.get('suite') === suite) { return this; }\r\n\r\n    // Only load the suite if it does not have children\r\n    // ie. is not a container/folder suite.\r\n    if (suite.childSuites.length === 0) {\r\n      // Clear the current state.\r\n      this.setCurrent(null);\r\n\r\n      // Prepare the new current state.\r\n      const current = suite.meta.thisContext.toValues();\r\n      current.suite = suite;\r\n      current.indexMode = this.indexMode();\r\n      current.isBeforeInvoked = false;\r\n      this.setCurrent(current);\r\n      if (storeAsLastSuite) { this.lastSelectedSuite(suite); }\r\n\r\n      // Invoke before handlers.\r\n      this.invokeBeforeHandlers(suite);\r\n\r\n      // If the last invoked spec on the suite contained a load.\r\n      const lastInvokedSpec = this.lastInvokedSpec(suite);\r\n      if (lastInvokedSpec && lastInvokedSpec.spec && lastInvokedSpec.isLoader) {\r\n        this.invokeSpec(lastInvokedSpec.spec);\r\n      }\r\n    }\r\n\r\n    // Finish up.\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads the given component.\r\n   *\r\n   * @param component:  The component Type\r\n   *                    or created component element (eg: <MyComponent/>).\r\n   *\r\n   * @param props:      Optional. The component props (if not passed in with\r\n   *                    a component element).\r\n   *\r\n   * @param children:   Optional. The component children (if not passed in\r\n   *                    with a component element).\r\n   *\r\n   */\r\n  loadComponent(component) {\r\n    invariant(component, 'Component not specified in this.component().');\r\n\r\n    // If a React element was passed pull out its type.\r\n    const updates = {};\r\n    if (React.isValidElement(component)) {\r\n      updates.componentType = component.type;\r\n    } else {\r\n      updates.componentType = component;\r\n    }\r\n\r\n    // Store on the current state.\r\n    this.setCurrent(updates);\r\n\r\n    // Finish up.\r\n    this.loadInvokeCount += 1;\r\n    return this;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Invokes the [before] handlers for\r\n   * the given suite if required.\r\n   * @return {boolean}  - true if the handlers were invoked\r\n   *                    - false if they have already been invoked.\r\n   */\r\n  invokeBeforeHandlers(suite) {\r\n    if (this.current.get('isBeforeInvoked')) { return false; }\r\n    const self = suite.meta.thisContext;\r\n    suite.beforeHandlers.invoke(self);\r\n    this.current = this.current.set('isBeforeInvoked', true);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Invokes the given spec.\r\n   * @param spec: The [Spec] to invoke.\r\n   * @param callback: Invoked upon completion.\r\n   *                   Immediately if the spec is not asynchronous.\r\n   */\r\n  invokeSpec(spec, callback) {\r\n    // Setup initial conditions.\r\n    const suite = spec.parentSuite;\r\n    const self = suite.meta.thisContext;\r\n    this.invokeBeforeHandlers(suite);\r\n    const loadInvokeCountBefore = this.loadInvokeCount;\r\n\r\n    // Invoke the methods.\r\n    spec.invoke(self, callback);\r\n\r\n    // Store a reference to last-invoked spec.\r\n    this.lastInvokedSpec(suite, {\r\n      spec,\r\n      isLoader: (this.loadInvokeCount > loadInvokeCountBefore),\r\n    });\r\n\r\n    // Increment the current invoke count for the spec.\r\n    const specInvokeCount = this.current.get('specInvokeCount') || {};\r\n    const total = specInvokeCount[spec.id] || 0;\r\n    specInvokeCount[spec.id] = total + 1;\r\n    this.setCurrent({ specInvokeCount });\r\n\r\n    // Finish up.\r\n    return this;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Gets or sets the last selected [Suite].\r\n   */\r\n  lastSelectedSuite(suite) {\r\n    if (suite) { suite = suite.id; }\r\n    const result = this.localStorage('lastSelectedSuite', suite);\r\n    return bdd.suites[result];\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets or sets the last spec for the given suite\r\n   * that was invoked that had a `.load()` call within it.\r\n   */\r\n  lastInvokedSpec(suite, { spec, isLoader = false } = {}) {\r\n    const KEY = `lastInvokedSpec:${ suite.id }`;\r\n    let value;\r\n    if (spec !== undefined) {\r\n      // WRITE.\r\n      value = { isLoader, spec: spec.id };\r\n      spec = spec.id;\r\n    }\r\n\r\n    // READ.\r\n    const result = this.localStorage(KEY, value);\r\n    if (result) {\r\n      result.spec = R.find(s => s.id === result.spec, suite.specs);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets or sets the display mode of the left-hand index.\r\n   * @param {string} mode: tree|suite\r\n   */\r\n  indexMode(mode) {\r\n    let result = this.localStorage('indexMode', mode, { default: 'tree' });\r\n    if (mode !== undefined) {\r\n      // WRITE (store in current state).\r\n      this.setCurrent({ indexMode: mode });\r\n    }\r\n\r\n    // READ.\r\n    result = result || 'tree';\r\n    if (result !== 'tree' && this.current.get('suite') === undefined) {\r\n      result = 'tree';\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates the current state with the given values.\r\n   *     NOTE: These values are cumulatively added to the state.\r\n   *           Use 'reset' to clear the state.\r\n   *\r\n   * @param args:  An object containing they [key:values] to set\r\n   *               or null to clear values.\r\n   */\r\n  setCurrent(args) {\r\n    // Update the state object.\r\n    if (args) {\r\n      Object.keys(args).forEach(key => {\r\n        const value = args[key];\r\n        this.current = value === undefined\r\n                ? this.current.remove(key)\r\n                : this.current.set(key, args[key]);\r\n      });\r\n    } else {\r\n      this.current = this.current.clear();\r\n    }\r\n\r\n    // Apply to the <Shell>.\r\n    if (this.shell) { this.shell.setState({ current: this.current }); }\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * Logs a value to the output.\r\n   * @param {array} values: The value or values to append.\r\n   */\r\n  log(...values) {\r\n    values = R.flatten(values);\r\n    const item = { time: new Date(), values };\r\n    this[LOG_LIST] = this[LOG_LIST].push(item);\r\n    this.setCurrent({ log: this[LOG_LIST], showLog: true });\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the output log.\r\n   */\r\n  clearLog() {\r\n    // console.log('clear log');\r\n    this[LOG_LIST] = this[LOG_LIST].clear();\r\n    this.setCurrent({ log: this[LOG_LIST], showLog: false });\r\n  }\r\n\r\n\r\n  /**\r\n   * Provides common access to localStorage.\r\n   *\r\n   * @param key:          The unique identifier of the value (this is\r\n   *                      prefixed with the namespace).\r\n   *\r\n   * @param value:        (optional). The value to set (pass null to remove).\r\n   *\r\n   * @param options:\r\n   *           default:   (optional). The default value to return if the session\r\n   *                      does not contain the value (ie. undefined).\r\n   *\r\n   * @return the read value.\r\n   */\r\n  localStorage(key, value, options) {\r\n    return localStorage.prop(`ui-harness:${ key }`, value, options);\r\n  }\r\n}\r\n\r\n\r\n// Singleton instance.\r\nexport default new Api();\r\n"]}