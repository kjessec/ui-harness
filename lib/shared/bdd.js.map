{"version":3,"sources":["../../src/shared/bdd.js"],"names":["ORIGINAL_DSL","supportedMethods","suites","allSuites","rootSuites","getRoot","suite","parent","parentSuite","filter","undefined","isOnly","map","uniq","register","global","__UIHARNESS__","forEach","name","contextFactory","type","unregister","reset"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,eAAe,EAArB;;kBAEe;AACbC,oBAAkB,CAChB,UADgB,EAEhB,QAFgB,EAGhB,IAHgB,EAIhB,SAJgB,CADL;AAObC,UAAQ,gBAAIC,SAPC;;AAUb;;;AAGAC,YAba,wBAaA;AACX,QAAMC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,UAAMC,SAASD,MAAME,WAArB;AACA,aAAOD,SAASF,QAAQE,MAAR,CAAT,GAA2BD,KAAlC;AACD,KAHD;AAIA,QAAIJ,SAAS,gBAAIA,MAAJ,EAAb;AACAA,aAASA,OAAOO,MAAP,CAAc;AAAA,aAASH,MAAME,WAAN,KAAsBE,SAAtB,IAAmCJ,MAAMK,MAAlD;AAAA,KAAd,CAAT;AACAT,aAASA,OAAOU,GAAP,CAAW;AAAA,aAASP,QAAQC,KAAR,CAAT;AAAA,KAAX,CAAT;AACAJ,aAAS,qBAAQ,gBAAEW,IAAF,CAAOX,MAAP,CAAR,CAAT;AACA,WAAOA,MAAP;AACD,GAvBY;;;AA0Bb;;;;AAIAY,UA9Ba,sBA8BF;AACT;AACA;AACA;AACAC,WAAOC,aAAP,GAAuB,IAAvB;;AAEA;AACA,SAAKf,gBAAL,CAAsBgB,OAAtB,CAA8B,gBAAQ;AACpCjB,mBAAakB,IAAb,IAAqBH,OAAOG,IAAP,CAArB;AACAH,aAAOG,IAAP,IAAe,gBAAIA,IAAJ,CAAf;AACD,KAHD;;AAKA;AACA;AACA,oBAAIC,cAAJ,GAAqB,UAACC,IAAD;AAAA,aAAU,0BAAgBA,IAAhB,CAAV;AAAA,KAArB;AACD,GA7CY;;;AAgDb;;;;AAIAC,YApDa,wBAoDA;AACX,SAAKpB,gBAAL,CAAsBgB,OAAtB,CAA8B,gBAAQ;AACpCF,aAAOG,IAAP,IAAelB,aAAakB,IAAb,CAAf;AACD,KAFD;AAGD,GAxDY;;;AA2Db;;;AAGAI,OA9Da,mBA8DL;AACN,SAAKD,UAAL;AACA,oBAAIC,KAAJ;AACD;AAjEY,C","file":"bdd.js","sourcesContent":["import R from 'ramda';\r\nimport bdd from 'js-bdd';\r\nimport { compact } from 'js-util';\r\nimport ThisContext from './ThisContext';\r\n\r\nconst ORIGINAL_DSL = {};\r\n\r\nexport default {\r\n  supportedMethods: [\r\n    'describe',\r\n    'before',\r\n    'it',\r\n    'section',\r\n  ],\r\n  suites: bdd.allSuites,\r\n\r\n\r\n  /**\r\n   * Gets the set of [Suites] to show in the index.\r\n   */\r\n  rootSuites() {\r\n    const getRoot = (suite) => {\r\n      const parent = suite.parentSuite;\r\n      return parent ? getRoot(parent) : suite;\r\n    };\r\n    let suites = bdd.suites();\r\n    suites = suites.filter(suite => suite.parentSuite === undefined || suite.isOnly);\r\n    suites = suites.map(suite => getRoot(suite));\r\n    suites = compact(R.uniq(suites));\r\n    return suites;\r\n  },\r\n\r\n\r\n  /**\r\n   * Sets up the BDD domain specific language.\r\n   * @param {object} namespace: The target object to register onto (ie. global||window).\r\n   */\r\n  register() {\r\n    // Set the __UIHARNESS__ flag to true so that spec files which share\r\n    // both server unit-tests and client visual-specs can determine what\r\n    // environment they are running within.\r\n    global.__UIHARNESS__ = true;\r\n\r\n    // Put the BDD domain-specific language into the global global.\r\n    this.supportedMethods.forEach(name => {\r\n      ORIGINAL_DSL[name] = global[name];\r\n      global[name] = bdd[name];\r\n    });\r\n\r\n    // Create the special context API that is used as [this]\r\n    // within [describe/it] blocks.\r\n    bdd.contextFactory = (type) => new ThisContext(type);\r\n  },\r\n\r\n\r\n  /**\r\n   * Removes the DSL from the global namespace.\r\n   * @param {object} namespace: The target object to register onto (ie. global||window).\r\n   */\r\n  unregister() {\r\n    this.supportedMethods.forEach(name => {\r\n      global[name] = ORIGINAL_DSL[name];\r\n    });\r\n  },\r\n\r\n\r\n  /**\r\n   * Resets the global namespace and the BDD data structure.\r\n   */\r\n  reset() {\r\n    this.unregister();\r\n    bdd.reset();\r\n  },\r\n};\r\n"]}