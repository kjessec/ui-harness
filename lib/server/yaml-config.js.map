{"version":3,"sources":["../../src/server/yaml-config.js"],"names":["ROOT_PATH","formatPath","path","is","String","trim","startsWith","join","toFileExtensionRegEx","item","RegExp","replace","parse","text","yaml","safeLoad","err","Error","message","entry","split","length","map","graphqlSchema","cssModules","Array","load","resolve","existsSync","undefined","readFileSync"],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,YAAY,4BAAlB;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAU;AAC3B,MAAI,CAAC,gBAAEC,EAAF,CAAKC,MAAL,EAAaF,IAAb,CAAL,EAAyB;AAAE,WAAOA,IAAP;AAAc;AACzCA,SAAOA,KAAKG,IAAL,EAAP;AACA,SAAOH,KAAKI,UAAL,CAAgB,GAAhB,IACH,eAAOC,IAAP,CAAYP,SAAZ,EAAuBE,IAAvB,CADG,GAEHA,IAFJ;AAGD,CAND;;AAQA,IAAMM,uBAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAU;AACrC,MAAI,EAAEA,gBAAgBC,MAAlB,CAAJ,EAA+B;AAC7BD,WAAOA,KAAKE,OAAL,CAAa,KAAb,EAAoB,KAApB,CAAP;AACAF,WAAO,IAAIC,MAAJ,CAAeD,IAAf,OAAP;AACD;AACD,SAAOA,IAAP;AACD,CAND;;AAaA;;;;;AAKO,IAAMG,wBAAQ,SAARA,KAAQ,CAACC,IAAD,EAAU;AAC7B;AACA,MAAIC,aAAJ;AACA,MAAI;AACFA,WAAO,iBAAOC,QAAP,CAAgBF,IAAhB,KAAyB,EAAhC;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,4CAAoDD,IAAIE,OAAxD,CAAN;AACD;;AAED;AACA,MAAI,gBAAEf,EAAF,CAAKC,MAAL,EAAaU,KAAKK,KAAlB,CAAJ,EAA8B;AAC5BL,SAAKK,KAAL,GAAaL,KAAKK,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAAb;AACD;AACDN,OAAKK,KAAL,GAAaL,KAAKK,KAAL,IAAc,EAA3B;AACA,MAAIL,KAAKK,KAAL,CAAWE,MAAX,KAAsB,CAA1B,EAA6B;AAC3BP,SAAKK,KAAL,CAAW,CAAX,IAAgB,aAAhB;AACD;AACDL,OAAKK,KAAL,GAAaL,KAAKK,KAAL,CAAWG,GAAX,CAAerB,UAAf,CAAb;;AAEA;AACA,MAAIa,KAAKS,aAAT,EAAwB;AACtBT,SAAKS,aAAL,GAAqBtB,WAAWa,KAAKS,aAAhB,CAArB;AACD;;AAED;AACA,MAAIC,aAAaV,KAAKU,UAAtB;AACA,MAAIA,UAAJ,EAAgB;AACdA,iBAAa,gBAAErB,EAAF,CAAKsB,KAAL,EAAYD,UAAZ,IAA0BA,UAA1B,GAAuC,CAACA,UAAD,CAApD;AACAA,iBAAaA,WAAWF,GAAX,CAAed,oBAAf,CAAb;AACAM,SAAKU,UAAL,GAAkBA,UAAlB;AACD;;AAED;AACA,SAAOV,IAAP;AACD,CAlCM;;AAsCP;;;;;;;;;AASO,IAAMY,sBAAO,SAAPA,IAAO,CAACxB,IAAD,EAAU;AAC5B;AACAA,SAAO,qBAAQA,IAAR,IAAgB,eAAOK,IAAP,CAAYP,SAAZ,EAAuB,gBAAvB,CAAhB,GAA2DE,IAAlE;AACAA,SAAOA,KAAKI,UAAL,CAAgB,GAAhB,IAAuB,eAAOqB,OAAP,CAAezB,IAAf,CAAvB,GAA8CA,IAArD;;AAEA;AACA,MAAI,CAAC,kBAAG0B,UAAH,CAAc1B,IAAd,CAAL,EAA0B;AAAE,WAAO2B,SAAP;AAAmB;;AAE/C;AACA,MAAMf,OAAO,kBAAGgB,YAAH,CAAgB5B,IAAhB,EAAsB,MAAtB,CAAb;AACA,SAAOU,MAAME,IAAN,CAAP;AACD,CAXM","file":"yaml-config.js","sourcesContent":["\r\nimport R from 'ramda';\r\nimport fs from 'fs-extra';\r\nimport fsPath from 'path';\r\nimport jsYaml from 'js-yaml';\r\nimport { isBlank } from 'js-util';\r\nimport { rootModulePath } from './paths';\r\n\r\nconst ROOT_PATH = rootModulePath();\r\n\r\nconst formatPath = (path) => {\r\n  if (!R.is(String, path)) { return path; }\r\n  path = path.trim();\r\n  return path.startsWith('.')\r\n    ? fsPath.join(ROOT_PATH, path)\r\n    : path;\r\n};\r\n\r\nconst toFileExtensionRegEx = (item) => {\r\n  if (!(item instanceof RegExp)) {\r\n    item = item.replace(/\\./g, '\\\\.');\r\n    item = new RegExp(`${ item }$`);\r\n  }\r\n  return item;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Parses the given YAML text into a config object.\r\n * @param {String} text: The raw YAML to parse.\r\n * @return {Object} config.\r\n */\r\nexport const parse = (text) => {\r\n  // Parse the YAML.\r\n  let yaml;\r\n  try {\r\n    yaml = jsYaml.safeLoad(text) || {};\r\n  } catch (err) {\r\n    throw new Error(`The [.uiharness.yml] file is invalid. ${ err.message }`);\r\n  }\r\n\r\n  // Format entry path.\r\n  if (R.is(String, yaml.entry)) {\r\n    yaml.entry = yaml.entry.split(',');\r\n  }\r\n  yaml.entry = yaml.entry || [];\r\n  if (yaml.entry.length === 0) {\r\n    yaml.entry[0] = './src/specs';\r\n  }\r\n  yaml.entry = yaml.entry.map(formatPath);\r\n\r\n  // Format GraphQL path.\r\n  if (yaml.graphqlSchema) {\r\n    yaml.graphqlSchema = formatPath(yaml.graphqlSchema);\r\n  }\r\n\r\n  // Format css-modules.\r\n  let cssModules = yaml.cssModules;\r\n  if (cssModules) {\r\n    cssModules = R.is(Array, cssModules) ? cssModules : [cssModules];\r\n    cssModules = cssModules.map(toFileExtensionRegEx);\r\n    yaml.cssModules = cssModules;\r\n  }\r\n\r\n  // Finish up.\r\n  return yaml;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Loads and parses the YAML file at the given location.\r\n *\r\n * @param {String} path:  Optional. The path to the YAML config file to load.\r\n *                        If not specified a path to [.uiharness.yml] in the root\r\n *                        of the project is used.\r\n *\r\n * @return {Object} config OR undefined if the file does not exist.\r\n */\r\nexport const load = (path) => {\r\n  // Setup initial conditions.\r\n  path = isBlank(path) ? fsPath.join(ROOT_PATH, '.uiharness.yml') : path;\r\n  path = path.startsWith('.') ? fsPath.resolve(path) : path;\r\n\r\n  // Ensure the path exists.\r\n  if (!fs.existsSync(path)) { return undefined; }\r\n\r\n  // Load and parse the file.\r\n  const yaml = fs.readFileSync(path, 'utf8');\r\n  return parse(yaml);\r\n};\r\n"]}