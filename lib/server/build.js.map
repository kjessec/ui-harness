{"version":3,"sources":["../../src/server/build.js"],"names":["yamlConfig","buildConfig","options","resolve","reject","silent","config","load","err","error","red","Error","build","is","Object","graphqlSchema","isRelayEnabled","String","prepareRelay","resolveRelay","rejectRelay","then","catch","vendor","isProduction","prod","process","env","NODE_ENV","outputFolder","extensions","msg","info","grey","buildItem","filename","entry","resolveItem","rejectItem","itemConfig","outputFile","stats","save","file","js","outputFileSync","join","toString","modules","app","logModule","data","blue","size","display","magenta","zipped","map","item","takeLast","length","forEach","outputPath","logModules","last","startBuilders","keys","key","all","builders","secs","reduce","prev","curr","buildTime","results","toFixed","files","green","acc","value","items","writeJsonSync"],"mappings":"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","file":"build.js","sourcesContent":["import R from 'ramda';\r\nimport Promise from 'bluebird';\r\nimport fs from 'fs-extra';\r\nimport fsPath from 'path';\r\nimport chalk from 'chalk';\r\nimport webpackBuilder from './webpack-builder';\r\nimport webpackConfig from './webpack-config';\r\nimport { formatEntryPaths, trimRootModulePath } from './paths';\r\nimport log from '../shared/log';\r\nimport * as yamlConfig from './yaml-config';\r\nimport initRelay from '../relay/init-relay';\r\n\r\n\r\n\r\n/**\r\n * Builds the JS bundle.\r\n * @param {Object} buildConfig:\r\n a\r\n *            NOTE: If not specified, a configuraiton is looked for within the\r\n *                  projects [.uiharness.yml] file.\r\n *\r\n *            -- prod:          Flag indicating if the build should be minified.\r\n *                              Default: false.\r\n *            -- outputFolder:  (Optional) Path to the folder to save files to.\r\n *                              Default: `./build`\r\n *            -- modules:       Array of { name:entry-path } objects.\r\n *            -- vendor:        Array of vendor modules.\r\n *            -- graphqlSchema: The path to the GraphQL schema if relay is being used.\r\n *\r\n * @param {Object} options:\r\n *\r\n *           --silent: Flag indicating if log output should be suppressed.\r\n *                     Default: false.\r\n *\r\n */\r\nexport default (buildConfig, options = {}) => new Promise((resolve, reject) => {\r\n\r\n  // Setup initial conditions.\r\n  const { silent } = options;\r\n  log.silent = silent || false;\r\n\r\n  // Ensure there is a build-config.\r\n  const config = yamlConfig.load();\r\n  if (!buildConfig) {\r\n    // Attempt to load the build-config from the YAML file.\r\n    if (!config) {\r\n      const err = 'No build configuration supplied and a `.uiharness.yml` file was not found.';\r\n      log.error();\r\n      log.error(chalk.red(err));\r\n      log.error();\r\n      reject(new Error(err));\r\n      return;\r\n    }\r\n    buildConfig = config.build;\r\n    if (!R.is(Object, buildConfig)) {\r\n      const err = 'The `.uiharness.yml` file must have a `build` section.';\r\n      log.error();\r\n      log.error(chalk.red(err));\r\n      log.error();\r\n      reject(new Error(err));\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Prepare for GraphQL/Relay.\r\n  const graphqlSchema = buildConfig.graphqlSchema || config.graphqlSchema;\r\n  const isRelayEnabled = R.is(String, graphqlSchema);\r\n  const prepareRelay = () => new Promise((resolveRelay, rejectRelay) => {\r\n    if (isRelayEnabled) {\r\n      // Ensure the relay babel-plugin knows about the GraphQL schema.\r\n      initRelay(graphqlSchema)\r\n        .then(() => resolveRelay({}))\r\n        .catch(err => rejectRelay(err));\r\n    } else {\r\n      resolveRelay({}); // Relay is not enabled.\r\n    }\r\n  });\r\n\r\n  // Extract the vendor array.\r\n  const vendor = buildConfig.vendor || [];\r\n  const isProduction = buildConfig.prod || process.env.NODE_ENV === 'production' || false;\r\n  const outputFolder = fsPath.resolve(buildConfig.outputFolder || './.build');\r\n  const extensions = config.extensions;\r\n\r\n  // Initial message.\r\n  const msg = `Building javascript (${ isProduction ? 'production' : 'development' })`;\r\n  log.info(chalk.grey(`${ msg }...\\n`));\r\n\r\n  const buildItem = (filename, entry) => new Promise((resolveItem, rejectItem) => {\r\n    (async () => {\r\n      entry = formatEntryPaths(entry);\r\n\r\n      // Prepare the Webpack configuration.\r\n      const itemConfig = webpackConfig({\r\n        isProduction,\r\n        isRelayEnabled,\r\n        entry,\r\n        vendor,\r\n        outputFile: `${ filename }.js`,\r\n        extensions,\r\n      });\r\n\r\n      // Build the JS.\r\n      let stats;\r\n      try {\r\n        stats = await webpackBuilder(itemConfig);\r\n      } catch (err) {\r\n        rejectItem(err);\r\n        return;\r\n      }\r\n\r\n      // Save the file.\r\n      try {\r\n        const save = (file, js) => {\r\n          fs.outputFileSync(fsPath.join(outputFolder, file), js.toString('utf8'));\r\n        };\r\n        save(`${ filename }.js`, stats.modules.app.js);\r\n        save('vendor.js', stats.modules.vendor.js);\r\n      } catch (err) {\r\n        rejectItem(err);\r\n        return;\r\n      }\r\n\r\n      // Finish up.\r\n      resolveItem({ filename, stats, entry });\r\n      return;\r\n    })();\r\n  });\r\n\r\n\r\n  const logModule = (filename, data, modules) => {\r\n    // General information.\r\n    log.info('', chalk.blue(filename));\r\n    log.info(\r\n      chalk.grey('   - size:     '),\r\n      data.size.display, chalk.grey('=>'),\r\n      chalk.magenta(data.zipped.display), chalk.grey('zipped'),\r\n      chalk.grey(isProduction ? '(minified)' : '')\r\n    );\r\n\r\n    // List modules/paths.\r\n    modules = modules.map(item => trimRootModulePath(item));\r\n    log.info(chalk.grey('   - input:    '), modules[0] || chalk.magenta('None.'));\r\n    R.takeLast(modules.length - 1, modules).forEach(item => {\r\n      log.info(chalk.grey('               '), item);\r\n    });\r\n\r\n    // Output path.\r\n    const outputPath = fsPath.join(outputFolder, `${ filename }.js`);\r\n    log.info(chalk.grey('   - output:   '), trimRootModulePath(outputPath));\r\n    log.info();\r\n  };\r\n\r\n\r\n  const logModules = (modules) => {\r\n    // Log each built module.\r\n    modules.forEach(item => {\r\n      logModule(item.filename, item.stats.modules.app, item.entry);\r\n    });\r\n    logModule('vendor', R.last(modules).stats.modules.vendor, vendor);\r\n  };\r\n\r\n\r\n  // Start building each item.\r\n  const startBuilders = () => Object\r\n    .keys(buildConfig.modules)\r\n    .map(key => buildItem(key, buildConfig.modules[key]));\r\n\r\n  prepareRelay()\r\n    .then(() => startBuilders())\r\n    .then(builders => Promise.all(builders))\r\n    .then(results => {\r\n      let secs = R.reduce((prev, curr) => prev + curr.stats.buildTime.secs, 0, results);\r\n      secs = +secs.toFixed(1);\r\n      const files = results.map(item => fsPath.join(outputFolder, `${ item.filename }.js`));\r\n\r\n      // Log results.\r\n      logModules(results, secs);\r\n      log.info(chalk.green(`${ secs } seconds`));\r\n\r\n      // Save 'stats.json' object.\r\n      const modules = results.reduce((acc, value) => {\r\n        const items = {};\r\n        Object.keys(value.stats.modules).forEach(key => {\r\n          const { file, size, zipped } = value.stats.modules[key];\r\n          items[key] = {\r\n            file,\r\n            size: size.display,\r\n            zipped: zipped.display,\r\n          };\r\n        });\r\n        acc[value.filename] = {\r\n          buildTime: `${ value.stats.buildTime.secs }s`,\r\n          files: items,\r\n        };\r\n        return acc;\r\n      }, {});\r\n      fs.writeJsonSync(fsPath.join(outputFolder, 'stats.json'), {\r\n        buildTime: `${ secs }s`,\r\n        modules,\r\n      });\r\n\r\n      // Finish up.\r\n      resolve({ files, secs });\r\n    })\r\n    .catch(err => reject(err));\r\n});\r\n"]}