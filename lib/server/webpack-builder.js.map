{"version":3,"sources":["../../src/server/webpack-builder.js"],"names":["toSizeStats","text","bytes","length","display","getInfo","fsMemory","file","js","readFileSync","zip","addFile","Buffer","size","zipped","toBuffer","toString","config","resolve","reject","clone","compiler","outputFileSystem","run","err","stats","app","join","output","path","filename","vendor","msecs","endTime","startTime","buildTime","secs","toFixed","modules"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,cAAc,SAAdA,WAAc,CAACC,IAAD;AAAA,SAAW;AAC7BC,WAAOD,KAAKE,MADiB;AAE7BC,aAAS,wBAASH,KAAKE,MAAd;AAFoB,GAAX;AAAA,CAApB;;AAMA,IAAME,UAAU,SAAVA,OAAU,CAACC,QAAD,EAAWC,IAAX,EAAoB;AAClC;AACA,MAAMC,KAAKF,SAASG,YAAT,CAAsBF,IAAtB,CAAX;;AAEA;AACA,MAAMG,MAAM,sBAAZ;AACAA,MAAIC,OAAJ,CAAY,SAAZ,EAAuB,IAAIC,MAAJ,CAAWJ,EAAX,CAAvB;;AAEA;AACA,SAAO;AACLD,cADK;AAELC,UAFK;AAGLK,UAAMb,YAAYQ,EAAZ,CAHD;AAILM,YAAQd,YAAYU,IAAIK,QAAJ,GAAeC,QAAf,CAAwB,MAAxB,CAAZ;AAJH,GAAP;AAMD,CAfD;;AAmBA;;;;;;kBAKe,UAACC,MAAD;AAAA,SAAY,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1D;AACAF,aAAS,gBAAEG,KAAF,CAAQH,MAAR,CAAT;AACA,QAAMI,WAAW,uBAAQJ,MAAR,CAAjB;AACA,QAAMX,WAAWe,SAASC,gBAAT,GAA4B,wBAA7C;;AAEA;AACAD,aAASE,GAAT,CAAa,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC3B,UAAID,GAAJ,EAAS;AACPL,eAAOK,GAAP,EADO,CACM;AACd,OAFD,MAEO;;AAEL;AACA,YAAME,MAAMrB,QACVC,QADU,EAEV,eAAOqB,IAAP,CAAYV,OAAOW,MAAP,CAAcC,IAA1B,EAAgCZ,OAAOW,MAAP,CAAcE,QAA9C,CAFU,CAAZ;AAIA,YAAMC,SAAS1B,QACbC,QADa,EAEb,YAFa,CAAf;;AAKA;AACA,YAAM0B,QAASP,MAAMQ,OAAN,GAAgBR,MAAMS,SAArC;AACAhB,gBAAQ;AACNiB,qBAAW;AACTH,wBADS;AAETI,kBAAM,CAAC,CAACJ,QAAQ,IAAT,EAAeK,OAAf,CAAuB,CAAvB;AAFE,WADL;AAKNC,mBAAS,EAAEZ,QAAF,EAAOK,cAAP;AALH,SAAR;AAOD;AACF,KAzBD;AA0BD,GAjC0B,CAAZ;AAAA,C","file":"webpack-builder.js","sourcesContent":["import R from 'ramda';\r\nimport Promise from 'bluebird';\r\nimport fsPath from 'path';\r\nimport webpack from 'webpack';\r\nimport MemoryFileSystem from 'memory-fs';\r\nimport filesize from 'filesize';\r\nimport AdmZip from 'adm-zip';\r\n\r\n\r\nconst toSizeStats = (text) => ({\r\n  bytes: text.length,\r\n  display: filesize(text.length),\r\n});\r\n\r\n\r\nconst getInfo = (fsMemory, file) => {\r\n  // Read the generated javascript.\r\n  const js = fsMemory.readFileSync(file);\r\n\r\n  // Calculate the size of the JS when zipped.\r\n  const zip = new AdmZip();\r\n  zip.addFile('file.js', new Buffer(js));\r\n\r\n  // Prepare stats.\r\n  return {\r\n    file,\r\n    js,\r\n    size: toSizeStats(js),\r\n    zipped: toSizeStats(zip.toBuffer().toString('utf8')),\r\n  };\r\n};\r\n\r\n\r\n\r\n/**\r\n * Builds the given Webpack configuration to memory.\r\n * @param {Object} config: The Webpack configuration object.\r\n * @return {Promise}.\r\n */\r\nexport default (config) => new Promise((resolve, reject) => {\r\n  // Prepare the webpack compiler.\r\n  config = R.clone(config);\r\n  const compiler = webpack(config);\r\n  const fsMemory = compiler.outputFileSystem = new MemoryFileSystem();\r\n\r\n  // Compile the JS.\r\n  compiler.run((err, stats) => {\r\n    if (err) {\r\n      reject(err); // Failed.\r\n    } else {\r\n\r\n      // Get info about each code chunk.\r\n      const app = getInfo(\r\n        fsMemory,\r\n        fsPath.join(config.output.path, config.output.filename),\r\n      );\r\n      const vendor = getInfo(\r\n        fsMemory,\r\n        '/vendor.js'\r\n      );\r\n\r\n      // Finish up.\r\n      const msecs = (stats.endTime - stats.startTime);\r\n      resolve({\r\n        buildTime: {\r\n          msecs,\r\n          secs: +(msecs / 1000).toFixed(1),\r\n        },\r\n        modules: { app, vendor },\r\n      });\r\n    }\r\n  });\r\n});\r\n"]}