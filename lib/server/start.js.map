{"version":3,"sources":["../../src/server/start.js"],"names":["yamlConfig","REQUIRED_NODE_VERSION","ROOT_PATH","YAML_CONFIG","load","displayPath","path","options","resolve","reject","packageJson","require","entry","env","process","NODE_ENV","port","proxy","graphqlSchema","images","baseUrl","name","dir","css","cssModules","isNil","isEmpty","Error","nodeVersion","clean","exec","silent","stdout","satisfies","isRelayEnabled","is","String","specs","config","outputFile","app","use","static","__dirname","join","info","grey","listen","reactJson","moduleVersion","version","packageName","magenta","packageVersion","green","takeLast","length","forEach","formatProxy","item","from","to","proxyItems","Object","keys","map","key","undefined"],"mappings":"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","file":"start.js","sourcesContent":["import R from 'ramda';\r\nimport Promise from 'bluebird';\r\nimport chalk from 'chalk';\r\nimport express from 'express';\r\nimport fsPath from 'path';\r\nimport shell from 'shelljs';\r\nimport semver from 'semver';\r\nimport webpackConfig from './webpack-config';\r\nimport webpackDevServer from './webpack-dev-server';\r\nimport uiharnessJson from '../../package.json';\r\nimport {\r\n  formatSpecPaths,\r\n  rootModulePath,\r\n  trimRootModulePath,\r\n  REACT_PATH,\r\n} from './paths';\r\nimport log from '../shared/log';\r\nimport initRelay from '../relay/init-relay';\r\nimport * as yamlConfig from './yaml-config';\r\n\r\nconst REQUIRED_NODE_VERSION = '>=5.5.0';\r\nconst ROOT_PATH = rootModulePath();\r\nconst YAML_CONFIG = yamlConfig.load() || {};\r\n\r\nconst displayPath = (path) => trimRootModulePath(path);\r\n\r\n\r\n\r\n/**\r\n * Starts the UIHarness development server.\r\n *\r\n * @param {Object} options:\r\n *\r\n *    --entry:             Required. Path to the specs files (comma seperated if more than one).\r\n *\r\n *    --port:              Optional. The port to start the server on.\r\n *                         Default: 3030\r\n *\r\n *    --proxy:             Optional. An object containing { path, host } mappings\r\n *                         to proxy server requests to.\r\n *                         (https://webpack.github.io/docs/webpack-dev-server.html#proxy)\r\n *\r\n *   -- graphqlSchema:     Optional. A path to the GraphQL `schema.js` or `schema.json` file.\r\n *                         If not specified Relay will not be enabled.\r\n *\r\n * @return {Promise}.\r\n */\r\nexport default (options = {}) => new Promise((resolve, reject) => {\r\n  (async () => {\r\n    // Setup initial conditions.\r\n    const packageJson = require(fsPath.resolve('./package.json'));\r\n\r\n    // Extract options or default values.\r\n    const entry = options.entry || YAML_CONFIG.entry;\r\n    const env = process.env.NODE_ENV || 'development';\r\n    const port = options.port || YAML_CONFIG.port || 3030;\r\n    const proxy = options.proxy || YAML_CONFIG.proxy;\r\n    const graphqlSchema = options.graphqlSchema || YAML_CONFIG.graphqlSchema;\r\n    const images = options.images\r\n      || YAML_CONFIG.images\r\n      || { baseUrl: `/${ packageJson.name }/images`, dir: 'images' };\r\n    const css = options.css\r\n      || YAML_CONFIG.css\r\n      || { baseUrl: `/${ packageJson.name }/css`, dir: 'css' };\r\n    const cssModules = options.cssModules || YAML_CONFIG.cssModules;\r\n\r\n    // Ensure required values exist.\r\n    if (R.isNil(entry) || R.isEmpty(entry)) { throw new Error('Entry path(s) must be specified.'); }\r\n\r\n    // Ensure the minimum version of node is supported.\r\n    const nodeVersion = semver.clean(shell.exec('node -v', { silent: true }).stdout);\r\n    if (!semver.satisfies(nodeVersion, REQUIRED_NODE_VERSION)) {\r\n      return reject(new Error(`The UIHarness requires node version ${ REQUIRED_NODE_VERSION }.`));\r\n    }\r\n\r\n    // Ensure ES6+ within the specs can be imported.\r\n    require('babel-register');\r\n\r\n    // Initialize the Relay/GraphQL schema (if specified).\r\n    const isRelayEnabled = R.is(String, graphqlSchema);\r\n    if (isRelayEnabled) {\r\n      try {\r\n        await initRelay(graphqlSchema);\r\n      } catch (err) {\r\n        return reject(err);\r\n      }\r\n    }\r\n\r\n    // Prepare the Webpack configuration.\r\n    const specs = formatSpecPaths(entry);\r\n    const config = webpackConfig({\r\n      isRelayEnabled,\r\n      entry: specs,\r\n      outputFile: 'specs.js',\r\n      cssModules,\r\n    });\r\n\r\n    // Create the development server.\r\n    const app = webpackDevServer(config, { proxy });\r\n    app.use('/', express.static(fsPath.resolve(__dirname, '../../public')));\r\n\r\n    // Create an end-point to serve images and CSS from.\r\n    app.use(images.baseUrl, express.static(fsPath.join(ROOT_PATH, images.dir)));\r\n    app.use(css.baseUrl, express.static(fsPath.join(ROOT_PATH, css.dir)));\r\n\r\n    // Start the server.\r\n    log.info('\\n');\r\n    log.info(chalk.grey(`Starting (${ env })...`));\r\n    app.listen(port, () => {\r\n      // Server details.\r\n      const reactJson = require(fsPath.join(REACT_PATH, 'package.json'));\r\n      const moduleVersion = packageJson.version || '0.0.0';\r\n      const packageName = chalk.magenta(packageJson.name);\r\n      const packageVersion = chalk.grey(`(v${ moduleVersion })`);\r\n      log.info();\r\n      log.info(chalk.green(`UIHarness${ chalk.grey('@') }${ chalk.grey(uiharnessJson.version) }`));\r\n      log.info(chalk.grey(' - module:   '), packageName, packageVersion);\r\n      log.info(chalk.grey(' - port:     '), port);\r\n      log.info(chalk.grey(' - react:    '), `v${ reactJson.version }`);\r\n      if (isRelayEnabled) {\r\n        log.info(chalk.grey(' - graphql:  '), displayPath(graphqlSchema));\r\n      }\r\n      // Specs.\r\n      log.info(chalk.grey(' - specs:    '), displayPath(specs[0]) || chalk.magenta('None.'));\r\n      R.takeLast(specs.length - 1, specs).forEach(path => {\r\n        log.info(chalk.grey('             '), displayPath(path));\r\n      });\r\n\r\n      // Images.\r\n      log.info(chalk.grey(' - images:   '), chalk.grey(`${ images.baseUrl } =>`), images.dir);\r\n\r\n      // Proxy.\r\n      if (YAML_CONFIG.proxy) {\r\n        const formatProxy = (item) => `${ chalk.grey(item.from, '=>') } ${ item.to }`;\r\n        const proxyItems = Object\r\n          .keys(YAML_CONFIG.proxy)\r\n          .map(key => ({ from: key, to: proxy[key] }));\r\n        log.info(chalk.grey(' - proxy:    '), formatProxy(proxyItems[0]));\r\n        R.takeLast(proxyItems.length - 1, proxyItems).forEach(item => {\r\n          log.info(chalk.grey('             '), formatProxy(item));\r\n        });\r\n      }\r\n\r\n      // Finish up.\r\n      log.info('');\r\n      resolve({});\r\n    });\r\n    return undefined;\r\n  })();\r\n});\r\n"]}